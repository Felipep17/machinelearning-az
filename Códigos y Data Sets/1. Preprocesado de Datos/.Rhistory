pred_sarima = results_sarima.predict(start = start_date, end = end_date)
pred_sarima.plot(figsize = (20,5), color = "red")
test_autoarima['count'].plot(color = "blue")
plt.title("SARIMA", size = 24)
plt.legend(['Predictions','Real'])
plt.show()
train.columns = ['ds','y']
train['ds'] = pd.to_datetime(train['ds'])
train.head(2)
test.year_month = pd.to_datetime(test.year_month)
test.set_index("year_month", inplace=True)
test.head(2)
m = Prophet()
import Prophet
import prophet
m = prophet()
m = prophet()
m.fit(train)
m = prophet()
from fbprophet import Prophet
import fbprophet
!pip install fbprophet
!pip install pystan==2.19.1.1 prophet
import prophet
reticulate::repl_python()
import numpy as np
import pandas as pd
import scipy
import statsmodels.api as sm
import matplotlib.pyplot as plt
import sklearn
import seaborn as sns
import pandas as pd
import statsmodels.graphics.tsaplots as sgt
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf
from statsmodels.tsa.seasonal import seasonal_decompose
import prophet
import warnings
import prophet
from fbprophet import Prophet
from pmdarima.arima import auto_arima
from statsmodels.tsa.statespace.sarimax import SARIMAX
# Importar la base de datos
warnings.filterwarnings("ignore")
sns.set()
fichero="C:/Users/sebas/OneDrive/Escritorio/Códigos en R y Python/Series de Tiempo y Pronóstico/12. Prediciendo el futuro/Python/2005_2006_flights.csv"
fichero2= "C:/Users/sebas/OneDrive/Escritorio/Códigos en R y Python/Series de Tiempo y Pronóstico/12. Prediciendo el futuro/Python/2007_flights.csv"
# Creación dataframes
train = pd.read_csv(fichero)
test = pd.read_csv(fichero2)
train.head()
test.head()
# Test de entrenamiento
train_autoarima = train.copy()
test_autoarima = test.copy()
#
train_autoarima.year_month = pd.to_datetime(train_autoarima.year_month)
train_autoarima.set_index("year_month", inplace=True)
test_autoarima.year_month = pd.to_datetime(test_autoarima.year_month)
test_autoarima.set_index("year_month", inplace=True)
#########
sd = seasonal_decompose(train_autoarima['count'], model='add')
sd.plot()
plt.show()
sd.observed.plot(figsize=(12,2))
plt.show()
sd = seasonal_decompose(train_autoarima['count'], model='add')
sd = seasonal_decompose(train_autoarima['count'], model='add')
sd.observed.plot(figsize=(12,2))
plt.show()
results = seasonal_decompose(train_autoarima['count'], model='add')
results.observed.plot(figsize=(12,2))
plt.show()
results.observed.plot(figsize=(12,2))
plt.show()
results = seasonal_decompose(train_autoarima['count'], model='add')
results.observed.plot(figsize=(12,2))
plt.show()
results.trend.plot(figsize=(12,2))
plt.show()
# Importando los datos
library(readr)
APTelectric <- read_csv("C:/Users/sebas/OneDrive/Escritorio/Códigos en R y Python/Series de Tiempo y Pronóstico/13. Redes Neuronales/R/APTelectricity.csv",
col_types = cols(X1 = col_skip()))
# Objeto ts
myts = ts(APTelectric$watt, frequency = 288)
# Objeto ts
myts = ts(APTelectric$watt, frequency = 288)
plot(myts,las=2)
# Ajuste del modelo
library(forecast)
fit = nnetar(myts)
# Predicciones
nnetforecast <- forecast(fit, h = 400, PI = F)
library(ggplot2)
autoplot(nnetforecast)
# Usando una variable ex?gena
fit2 = nnetar(myts, xreg = APTelectric$appliances)
# Definiendo los pron?sticos de la variable ex?gena para 10 horas
y =rep(2, times = 12*10)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
y
# Definiendo los pron?sticos de la variable ex?gena para 10 horas
y =rep(2, times = 12*10)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
# Definiendo los pron?sticos de la variable ex?gena para 30 horas
y =rep(2, times = 12*30)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
nnetforecast
# Definiendo los pron?sticos de la variable ex?gena para 10 horas
y =rep(2, times = 12*10)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
# Definiendo los pron?sticos de la variable ex?gena para 30 horas
y =rep(2, times = 12*30)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
# Definiendo los pron?sticos de la variable ex?gena para 30 horas
y =rep(4, times = 12*30)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
# Definiendo los pron?sticos de la variable ex?gena para 30 horas
y =rep(10, times = 12*30)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
# Definiendo los pron?sticos de la variable ex?gena para 30 horas
y =rep(2, times = 12*30)
nnetforecast <- forecast(fit2, xreg = y, PI = F)
autoplot(nnetforecast)
reticulate::repl_python()
import numpy as np
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
quit
setwd("C:/Users/sebas/OneDrive/Escritorio/Machine Learning/machinelearning-az/datasets/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
reticulate::repl_python()
dataset = pd.read_csv('Data.csv') #Empieza en 0
X = dataset.iloc[:, :-1].values
View(dataset)
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# Importar el data set
dataset = pd.read_csv('Data.csv') #Empieza en 0
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 3].values
View(dataset)
dataset$Country
# Plantilla para el Pre Procesado de Datos - Datos faltantes
# Importar el dataset
dataset = read.csv('Data.csv')
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Country[1]<- NA
View(dataset)
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE))
# Plantilla para el Pre Procesado de Datos - Datos faltantes
# Importar el dataset
dataset = read.csv('Data.csv')
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
dataset$Salary = ifelse(is.na(dataset$Salary),
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),dataset$Salary)
View(dataset)
dataset$Country[1]<- NA
View(dataset)
ifelse(is.na(dataset$Country),
sample(dataset$Country[-is.na(dataset$Country)],1),dataset$Country)
dataset$Country<-ifelse(is.na(dataset$Country),
sample(dataset$Country[-is.na(dataset$Country)],1),dataset$Country)
View(dataset)
# Plantilla para el Pre Procesado de Datos - Datos faltantes
# Importar el dataset
dataset = read.csv('Data.csv')
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),dataset$Salary)
dataset$Country[1]<- NA
View(dataset)
dataset$Country<-ifelse(is.na(dataset$Country),
sample(dataset$Country[-is.na(dataset$Country)],1),dataset$Country)
class(dataset)
class(dataset[,1])
Imputacion<- function(X){
for (i in 1:ncol(X)){
if( class(X[,i]=='character'|'factor')){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),dataset$Country)
}
}
}
Imputacion<- function(X){
for (i in 1:ncol(X)){
if( class(X[,i]=='character'|'factor')){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( class(X[,i]=='numeric'|'double')){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
Imputacion(dataset)
class(X[,i]
class(dataset[,i])
class(dataset[,1])
paste(class(dataset[,1]))
if( paste(class(X[,i]))=='character'|'factor')){
if( paste(class(X[,i]))=='character'|'factor'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
Imputacion<- function(X){
for (i in 1:ncol(X)){
if( paste(class(X[,i]))=='character'|'factor'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( class(X[,i]=='numeric'|'double')){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
Imputacion(dataset)
if( paste(class(X[,i]))=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
Imputacion<- function(X){
for (i in 1:ncol(X)){
if( paste(class(X[,i]))=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( class(X[,i]=='numeric'|'double')){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
Imputacion(dataset)
if( class(X[,i]=='numeric')){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
Imputacion<- function(X){
for (i in 1:ncol(X)){
if( paste(class(X[,i]))=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( class(X[,i]=='numeric')){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
Imputacion(dataset)
Imputacion<- function(X){
tipo<- class(X[,I])
for (i in 1:ncol(X)){
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo=='numeric')){
Imputacion(dataset)
Imputacion<- function(X){
tipo<- class(X[,I])
for (i in 1:ncol(X)){
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
Imputacion(dataset)
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
Imputacion(dataset)
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
return(X)
}
dataset.imp<-Imputacion(dataset)
View(dataset.imp)
# Plantilla para el Pre Procesado de Datos - Datos faltantes
# Importar el dataset
dataset = read.csv('Data.csv')
# Tratamiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
# Plantilla para el Pre Procesado de Datos - Datos faltantes
# Importar el dataset
dataset = read.csv('Data.csv')
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
return(X)
}
dataset.imp<-Imputacion(dataset)
dataset.imp
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
}
}
dataset.imp<-Imputacion(dataset)
return(X[,i])
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
return(X[,i])
}
}
dataset.imp<-Imputacion(dataset)
dataset.imp
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
X[,i]<-return(X[,i])
}
}
dataset.imp<-Imputacion(dataset)
dataset.imp
return(X[,i])
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
return(X[,i])
}
}
dataset.imp<-Imputacion(dataset)
paste(class(dataset[,1]))
# Plantilla para el Pre Procesado de Datos - Datos faltantes
# Importar el dataset
dataset = read.csv('Data.csv')
Imputacion<- function(X){
for (i in 1:ncol(X)){
tipo<- class(X[,i])
if( tipo=='character'){
X[,i]<-ifelse(is.na(X[,i]),
sample(X[,i][-is.na(X[,i])],1),X[,i])
}
if( tipo== 'numeric'){
X[,i]<-ifelse(is.na(X[,i]),
mean(X[,i],na.rm=T),X[,i])
}
return(X[,i])
}
}
dataset.imp<-Imputacion(dataset)
apply(dataset,2,Imputacion)
Imputacion<- function(X){
tipo<- class(X)
if( tipo=='character'){
X<-ifelse(is.na(X),
sample(X[-is.na(X)],1),X)
}
if( tipo== 'numeric'){
X<-ifelse(is.na(X),
mean(X,na.rm=T),X)
}
return(X[,i])
}
}
Imputacion<- function(X){
tipo<- class(X)
if( tipo=='character'){
X<-ifelse(is.na(X),
sample(X[-is.na(X)],1),X)
}
if( tipo== 'numeric'){
X<-ifelse(is.na(X),
mean(X,na.rm=T),X)
}
return(X[,i])
}
Imputacion<- function(X){
tipo<- class(X)
if( tipo=='character'){
X<-ifelse(is.na(X),
sample(X[-is.na(X)],1),X)
}
if( tipo== 'numeric'){
X<-ifelse(is.na(X),
mean(X,na.rm=T),X)
}
return(X[,i])
}
apply(dataset,2,Imputacion)
}
Imputacion<- function(X){
tipo<- class(X)
if( tipo=='character'){
X<-ifelse(is.na(X),
sample(X[-is.na(X)],1),X)
}
if( tipo== 'numeric'){
X<-ifelse(is.na(X),
mean(X,na.rm=T),X)
}
}
apply(dataset,2,Imputacion)
# Escalado de valores
training_set[,2:3] = scale(training_set[,2:3])
# Plantilla para el Pre Procesado de Datos
# Importar el dataset
dataset = read.csv('Data.csv')
#dataset = dataset[, 2:3]
dataset$Age= ifelse(is.na(dataset$Age),median(dataset$Age,na.rm=T),dataset$Age)
dataset$Salary= ifelse(is.na(dataset$Salary),median(dataset$Salary,na.rm=T),dataset$Salary)
############ Creación de factores
dataset$Country <- factor(dataset$Country,levels=c('France','Spain','Germany',labels=c(1,2,3)))
dataset$Country <- factor(dataset$Purchased,levels=c('No','Yes',labels=c(0,1)))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(testing_set)
View(training_set)
