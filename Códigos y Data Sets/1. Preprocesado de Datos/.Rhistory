plot(rnorm(100,rnorm(10000),abs(2*mu)),type='l')
plot.ts(Y)
plot(rnorm(100,rnorm(10000),abs(2*mu)),type='l')
u<-rnorm(100,rnorm(10000),abs(rnorm(100))+abs(2*mu))
plot(rnorm(100,rnorm(10000),abs(2*mu)),type='l')
u<-rnorm(100,rnorm(10000),abs(rnorm(100))+abs(2*mu))
plot(u)
plot(u,type='l')
plot(rnorm(100,mu,abs(2*mu)),type='l')
mu
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
u<-rnorm(100,rnorm(10000),abs(rnorm(100))+abs(2*mu))
plot(rnorm(100,mu,abs(2*mu)),type='l')
plot(u,type='l')
plot(rnorm(100,mu,abs(2*mu)),type='l')
u<-rnorm(100,rnorm(10000),abs(rnorm(100))+abs(2*mu))
plot(u,type='l')
u<-rnorm(100,rnorm(10000),abs(rnorm(100))+abs(2*mu))
plot(u,type='l')
u<-rnorm(100,mu,abs(2*mu))
u<-rnorm(100,mu,abs(2*mu))
plot(u,type='l')
u<-rnorm(100,mu,abs(2*mu))
plot(u,type='l')
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
u<-rnorm(100,mu,abs(2*mu))
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(u)
adf.test(u)
Y<- sample(X,length(X))
u<-rnorm(100,mu,abs(2*mu))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
u<-rnorm(100,mu,abs(2*mu))
plot(u,type='l')
u<-rnorm(100,mu+2*n,abs(2*mu))
plot(u,type='l')
u<-rnorm(100,mu,abs(2*mu))
plot(u,type='l')
u<-rnorm(100,mu,abs(2*mu)+abs(,u))
u<-rnorm(100,mu,abs(2*mu)*abs(mu))
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
u<-rnorm(100,mu,abs(2*mu)*abs(mu))
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(u)
adf.test(u)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
u<-rnorm(100,mu,abs(2*mu)*abs(mu))
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(u)
u<-rnorm(100,9-5*n,abs(2*mu)*abs(mu))
plot(u,type='l')
plot(u,type='l')
u<-rnorm(100,9-5*n)
plot(u,type='l')
u<-rnorm(100,9-5*n,abs(rnorm(1)))
plot(u,type='l')
plot(u,type='l')
u<-rnorm(100,9-5*n,abs(rnorm(1)))
plot(u,type='l')
plot(u,type='l')
u<-rnorm(100,9-5*n,abs(rnorm(n)))
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
u<-rnorm(100,9-5*n,abs(rnorm(n)))
plot(u,type='l')
adf.test(u)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
TT<-rnorm(100,9-5*n,abs(rnorm(n)))
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(u)
plot(TT)
u<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(u)
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(u,type='l')
plot(u,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(TT,type='l')
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(TT,type='l')
plot.ts(Y)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
X<- c(rbinom(100,10,0.5),TT,rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
X<- c(rbinom(100,10,0.5),TT,rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
### Estacionariedad
set.seed(1)
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
X<- c(rbinom(100,10,0.5),TT,rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
X<- c(rbinom(100,10,0.5),TT,rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
plot(TT,type='l')
plot.ts(Y)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
X<- c(rbinom(100,10,0.5),TT,rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
adf.test(TT)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
X<- c(rbinom(100,10,0.5),TT,rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
plot(TT,type='l')
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
TT<-rnorm(100,9-5*n,abs(2*mu)*abs(mu)+888)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu))
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu))
plot(TT,type='l')
TT<-rnorm(100,9-5*n,abs(2*mu)+n)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
TT<-rnorm(100,9-5*n,abs(2*mu)+n)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
TT<-rnorm(100,9-5*n,abs(2*mu)*90)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
### Estacionariedad
library(tseries)
library(forecast)
n<- 1:100
n<- 1:1000
mu<- 9-5*n
abs(rnorm(100))
X<- c(rbinom(100,10,0.5),rnorm(100,mu,abs(2*mu)),rgamma(100,abs(rnorm(100))+2,2),rpois(100,10),rweibull(100,abs(rnorm(100))+2,5))
Y<- sample(X,length(X))
TT<-rnorm(100,9-5*n,abs(2*mu)+n)
plot(TT,type='l')
plot.ts(Y)
adf.test(Y)
adf.test(TT)
# Plantilla para el Pre Procesado de Datos
# Importar el dataset
dataset = read.csv('Data.csv')
setwd("C:/Users/sebas/OneDrive/Escritorio/Machine Learning/machinelearning-az/Códigos y Data Sets/1. Preprocesado de Datos")
# Plantilla para el Pre Procesado de Datos
# Importar el dataset
dataset = read.csv('Data.csv')
#dataset = dataset[, 2:3]
dataset$Age= ifelse(is.na(dataset$Age),median(dataset$Age,na.rm=T),dataset$Age)
dataset$Salary= ifelse(is.na(dataset$Salary),median(dataset$Salary,na.rm=T),dataset$Salary)
############ Creación de factores
dataset$Country <- factor(dataset$Country,levels=c('France','Spain','Germany',labels=c(1,2,3)))
dataset$Country <- factor(dataset$Purchased,levels=c('No','Yes',labels=c(0,1)))
# Plantilla para el Pre Procesado de Datos
# Importar el dataset
dataset = read.csv('Data.csv')
View(data)
View(dataset)
for(i in 1:ncol(X)){
ifelse(is.na(X[,i]),sample(X[,i][-is.na(X[,i])),1),X[,i])
ifelse(is.na(X[,i]),sample(X[,i][-is.na(X[,i]),1),X[,i])
ifelse(is.na(X[,i]),sample(X[,i][-is.na(X[,i])],1),X[,i])
for(i in 1:ncol(X)){
ifelse(is.na(X[,i]),sample(X[,i][-is.na(X[,i])],1),X[,i])
}
X<- dataset
for(i in 1:ncol(X)){
ifelse(is.na(X[,i]),sample(X[,i][-is.na(X[,i])],1),X[,i])
}
View(X)
ifelse(is.na(X[,i]),sample(X[,i],1),X[,i])
X<- dataset
for(i in 1:ncol(X)){
ifelse(is.na(X[,i]),sample(X[,i],1),X[,i])
}
View(X)
sample(X[,i],1)
X<- dataset
sample(X[,1],1)
sample(X[,1],1)
for(i in 1:ncol(X)){
ifelse(is.na(X[,i]),sample(X[,i],1),X[,i])
}
View(X)
sample(X[,1],1)
X[,i]<-felse(is.na(X[,i]),sample(X[,i],1),X[,i])
X<- dataset
sample(X[,1],1)
for(i in 1:ncol(X)){
X[,i]<-ifelse(is.na(X[,i]),sample(X[,i],1),X[,i])
}
View(X)
class(X[,1])
Ti_data <- read.csv("C:/Users/sebas/OneDrive/Escritorio/Códigos en R y Python/Series de Tiempo y Pronóstico/3. Características fundamentales/Python/Ti_data.csv")
View(Ti_data)
X<- as.data.frame(Ti_data)
X[nrow(X),]
library(zoo)
td<-seq(as.POSIXct("2018-10-01 18:00:00"), as.POSIXct("2019-04-29 17:30:00"), by="30 min")
hms("18:00:00")
Ti.z<- zoo(X$Ti,order.by=td)
library(lubridate)
td<-seq(as.POSIXct("2018-10-01 18:00:00"), as.POSIXct("2019-04-29 17:30:00"), by="30 min")
hms("18:00:00")
Ti.z<- zoo(X$Ti,order.by=td)
library(dygraphs)
dygraph(Ti.z)
library("lubridate")
###############
datos<- as.data.frame(cbind(Ti_data[,1],Ti_data[,2]))
datos$time <- format(as.POSIXct(
datos$V1),format = "%H:%M:%S")
head(datos)
# extracting date
datos$V1 <- as.Date (datos$V1)
print ("Modified DataFrame")
print (datos)
head(datos)
datos$V1
data.frame()
library(reshape2)
nw<- dcast(datos,datos$V1~datos$time,value.var='V2')
rownames(nw)<- as.Date(nw$`datos$V1`)
nw<- nw[,-1]
View(nw)
ncol(nw)
nw<- t(nw)
wday('2018-10-01')
nw<- rbind(nw[37:48,],nw[1:36,])
nw<- ts(nw)
plot(nw[,1],type='l',ylim=c(16,24),col=c('aquamarine4',alpha=0.5),ylab="Temperaturas",las=2,panel.first = grid(),main='Internal Temperature')
par(mfrow=c(1,1))
for(i in 2:ncol(nw)){
lines(nw[,i],col=c('aquamarine4',alpha=0.5))
}
colores<- c("aquamarine4","red1","yellow","blue",'orange','purple4','pink')
lun<-seq(1,211,7)
mar<- seq(2,211,7)
mier<- seq(3,211,7)
jue<- seq(4,211,7)
vie<- seq(5,211,7)
sab<- seq(6,211,7)
dom<- seq(7,211,7)
plot(nw[,1],type='l',ylim=c(16,24),col=c('aquamarine4',alpha=0.5),ylab="Temperaturas",las=2,panel.first = grid(),main='Internal Temperature',xlim=c(3,49))
for(i in 1:length(lun)){
lines(nw[,lun[i]],col=colores[1],lwd=1)
}
for(i in 1:length(mar)){
lines(nw[,mar[i]],col=colores[2],lwd=0.5)
}
for(i in 1:length(mier)){
lines(nw[,mier[i]],col=colores[3],lwd=0.5)
}
for(i in 1:length(jue)){
lines(nw[,jue[i]],col=colores[4],lwd=0.5)
}
for(i in 1:length(vie)){
lines(nw[,vie[i]],col=colores[5],lwd=0.5)
}
for(i in 1:length(sab)){
lines(nw[,sab[i]],col=colores[6],lwd=1)
}
for(i in 1:length(dom)){
lines(nw[,dom[i]],col=colores[7],lwd=1)
}
plot(1:1000,1:1000)
x<- 1:10000
y<- 1:10000
x<- 1:10000
y<- 1:10000
y[10001]<- -2
x[10001]<- 10001
plot(x,y)
library(zoom)
zm()
########### Importación de la base de datos##########
#############
library(alr4)
#Visualización breve de los datos
#Análisis visual y explotatorio de la base de datos antes del modelo
# Se observan las 10 primeras filas del dataset
head(UBSprices)
#Creo un dataframe con mis variables de interés para realizar el modelo
X<- as.data.frame(cbind(UBSprices$rice2003,UBSprices$rice2009))
colnames(X)<- c("Arroz2003","Arroz2009")
rownames(X)<-rownames(UBSprices)
#Volvemos mas fácil el proceso de llamar las variabes con la función attach
attach(X)
# Evaluamos el coeficiente de correlación lineal de pearson
cor(X)
# Observamos la relación entre las variables
plot(Arroz2009~Arroz2003, pch=19,col='black',xlab="Precio por país en minutos de trabajo para un Kg de Arroz (2003)",
ylab="Precio por país en minutos de trabajo para un Kg de Arroz (2009)")
#Generamos una variable auxiliar para evaluar la diferencia entre los precios
p<-as.data.frame(X[,2]-X[,1])
# Creamos indices dónde se evidencien los cambios de precios
indices<-which(X[,1]>X[,2])
indices2<-which(X[,1]<X[,2])
indices3<-which(X[,1]==X[,2])
### Más caros
# Cambiar los márgenes del gráfico (el cuarto es el margen derecho)
plot(X[,1],X[,2],xlab="Precio por país en minutos de trabajo para un Kg de Arroz (2003)",
ylab="Precio por país en minutos de trabajo para un Kg de Arroz (2009)",pch=19, panel.first = grid(),ylim=c(10,100))
#Pintamos con la función point las diferencias de precios
points(X$Arroz2003[indices2],X$Arroz2009[indices2],col='red',pch=19)
points(X$Arroz2003[indices3],X$Arroz2009[indices3],col='black',pch=19)
points(X$Arroz2003[indices],X$Arroz2009[indices],col='blue',pch=19)
legend(x = "topright",legend=c("Aumento","Igual","Disminuyo"),
col = c("red","black","blue"),pch=c(19,19,19),pt.cex=1,
box.lwd=0.6,title="Precio 2009vs2003",text.font =15,cex=0.45)
### Evaluamos diferencias mas significativas
colnames(p)<- 'Cambio en el precio'
rownames(p)<- rownames(X)
View(p)
indices4<-c(which(p[,1]>40),which(p[,1]< -10))
text(X$Arroz2003[indices4],X$Arroz2009[indices4],labels=rownames(X)[indices4],cex=0.9,pos=2)
##### Modelo de regresión lineal
model<- lm(Arroz2009~Arroz2003,data=X)
################### Informe Modelo
x.nuevo = data.frame(Arroz2003=seq(min(X[,1]),max(X[,1]),length.out=nrow(X)))
pred.media = predict(model,x.nuevo,interval = 'confidence')
pred.nuev.obs= predict(model,x.nuevo,interval = 'prediction')
plot(X[,1],X[,2],xlab="Precio por país en minutos de trabajo para un Kg de Arroz (2003)",
ylab="Precio por país en minutos de trabajo para un Kg de Arroz (2009)",pch=19, panel.first = grid(),
ylim=c(0,100),main='Modelo de regresión lineal')
abline(model)
#Pintamos con la función point las diferencias de precios
points(X$Arroz2003[indices2],X$Arroz2009[indices2],col='red',pch=19)
points(X$Arroz2003[indices3],X$Arroz2009[indices3],col='black',pch=19)
points(X$Arroz2003[indices],X$Arroz2009[indices],col='blue',pch=19)
text(X$Arroz2003[indices4],X$Arroz2009[indices4],labels=rownames(X)[indices4],cex=0.9,pos=2)
lines(x.nuevo$Arroz2003,pred.media[,2],lty=2,col="purple",lwd=2)
lines(x.nuevo$Arroz2003,pred.media[,3],lty=2,col="purple",lwd=2)
lines(x.nuevo$Arroz2003,pred.nuev.obs[,2],lty=3,col="red",lwd=2)
lines(x.nuevo$Arroz2003,pred.nuev.obs[,3],lty=3,col="red",lwd=2)
legend(x = "bottomright",legend=c("Modelo","Intervalo de confianza 95%","Intervalo de predicción 95%"),
col = c("black","purple","red"),lty = c(1, 2,3),pt.cex=1,
box.lwd=0.6,text.font =15,cex=0.3)
#################### Validación de supuestos
library(ggfortify)
autoplot(model)
qqPlot(model)
autoplot(model)
qqPlot(model)
qqPlot(residuals(model))
shapiro.test(model)
shapiro.test(hist(residuals))
shapiro.test(residuals(model))
#################### Validación de supuestos
library(ggfortify)
autoplot(model)
